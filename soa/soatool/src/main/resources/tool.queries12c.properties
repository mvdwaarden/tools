#Neo Queries
#soatool.neo4j.queries=start,deps,logging,reporting,alert.destinations,xsd,cdm,deps.queue,composite,e2e
soatool.neo4j.queries=cdm.all,xsd.archi,osb,osbchain,usage,deps,archi,messagechain,xsd,logging,alert.destinations,reporting
#soatool.neo4j.query.startlist=match (n:ProxyService) where n.description="JdsGenZaakRSDispatch" with n match (n)-[e*]->(p) return head(labels(p)),p.binding,p.providerId,p.transactionRequired,p.sameTransactionForResponse,p.endpoints
#soatool.neo4j.query.start.type=row
soatool.neo4j.query.usage.cypher=match (compConsumer) -[e1]-> (consumer) -[e2]-> (svc:Service) -[e3]-> (composite:Composite) \
						optional match (svc) -[e3]->(composite:Composite) -[e4]-> (com:Component) -[e5]-> (p) -[e6]-> (t:Task)-[e7]-> (r:Reference) -[e8]-> (px:ProxyService) \
						return p,t,r,px,com,composite,svc,consumer,compConsumer,e1,e2,e3,e4,e5,e6,e7,e8
soatool.neo4j.query.start.cypher=match (n:ProxyService) where n.description="JdsGenZaakRSDispatch" with n match (n)-[e*]->(p) return n,e,p
soatool.neo4j.query.start.groups.field=providerId
soatool.neo4j.query.start.groups.regex=^(.*)Node:(.*),$2
soatool.neo4j.query.start.groups.default=OVERIG
soatool.neo4j.query.e2e.cypher=match (p:ProxyService) -[e1]-> (pof) -[e2]-> (c:Context) \
							optional match (c) -[e3]-> (b:BusinessService) \
							optional match (b) -[e4]-> (p1:ProxyService) \
							optional match (c) -[e5]-> (p2:ProxyService) \
						where p.description in [\
							"AanvraagNpApi",\
							"MaatschappelijkeActiviteitRS",\
							"NatuurlijkPersoonServiceReqRS",\
							"DocumentenGeneratorRS",\
							"BeschikkingEcRS",\
							"JustitieelDocumentatieZaakVanPersoonReqRS",\
							"ZmsPrintRS",\
							"ZmsGeldzakenRS",\
							"ErvaringsdataRS"] or b.description in ["ZmsGenZaakResACS"] \
						return p,p1,p2,b,pof,c,e1,e2,e3,e4,e5
soatool.neo4j.query.cdm.all.cypher=match (x:XSD) -[e1]-> (c:XSDComplexType) -[e2]-> (e:XSDElement) \
						optional match (x:XSD) -[e1]-> (c:XSDComplexType) -[e2]-> (e:XSDElement) -[e3]-> (c1:XSDComplexType) \
						optional match (x) -[e1] -> (c:XSDComplexType) \
						where x.id=~".*http://xmlns.justis.nl/CDM/xsd.*" \
						return x,e,c,c1,e1,e2,e3
soatool.neo4j.query.groups.xsd.field.name=id
soatool.neo4j.query.groups.xsd.schemaLocation.regex=^(.*)Node:([^\\/]*)/(wsdl|xsd)\\/V[1|2]\\/([^\\/]*)\\/([^\\/]*)(Import|Export|Service)(\\/.*)?,$5,\
								^(.*)Node:([^\\/]*)/(wsdl|xsd)\\/V[1|2]\\/([^\\/]*)\\/([^\\/]*)\\.wsdl,$5,\
								^(.*)Node:([^\\/]*)/(wsdl|xsd)\\/V[1|2]\\/([^\\/]*)\\.wsdl,$5,\
								^(.*)Node:([^\\/]*)/(wsdl|xsd)\\/V[1|2]\\/([^\\/]*)\\/([^\\/]*)(\\/.*)?,$5,\
								^(.*)Node:([^\\/]*)Service\\/([^\\/]*)\\/V[1|2]\\/(wsdl|xsd)\\/.*,$2,\
								^(.*)Node:([^\\/]*)\\/([^\\/]*)\\/V[1|2]\\/(wsdl|xsd)\\/.*,$2,\
								^(.*)Node:([^\\/]*)Service\\/.*,$2,\
								^(.*)Node:([^\\/]*)\\/.*,$2
soatool.neo4j.query.groups.xsd.id.regex=^(.*)Node:(http:\\/\\/xmlns.justis.nl\\/)([^\\/]*)\\/.*,$3,\
								^(.*)Node:(urn:epv:names:specification:bedrijfsdocument:).*,EPV,\
								^(.*)Node:(urn:oasis:names:specification:ubl:).*,UBL,\
								^(.*)Node:(http://xmlns.oracle.com/pcbpel/adapter/db\\/)([^\\/]*)(\\/.*)?,DB,\
								^(.*)Node:(http://xmlns.oracle.com/pcbpel/adapter/file\\/)([^\\/]*)\\/.*,FILE,\
								^(.*)Node:(http://www.w3.org\\/)([^\\/]*)\\/.*,W3,\
								^(.*)Node:(http://docs.oasis-open.org/ebxml\/)([^\\/]*)\\/.*,EBXML
#								^(.*)Node:([^\\/]*\\/)*(.*),$3
soatool.neo4j.query.cdm.cypher=match (x:XSD) -[e]-> (x1:XSD) \
						where x.id=~".*http://xmlns.justis.nl/CDM/xsd.*" \
						optional match (x) \
						where x.id=~".*http://xmlns.justis.nl/CDM/xsd.*" \
						return x,x1,eQc
soatool.neo4j.query.cdm.groups.field=${soatool.neo4j.query.groups.xsd.field.name}
soatool.neo4j.query.cdm.groups.regex=${soatool.neo4j.query.groups.xsd.id.regex}
#soatool.neo4j.query.xsd.cypher=match (c:XSDComplexType) -[e1]-> (c1:XSDComplexType) \
#						optional match (c:XSDComplexType) -[e2]-> (el1:XSDElement) -[e3]-> (c2:XSDComplexType) \
#						optional match (c1:XSDComplexType) -[e4]-> (el2:XSDElement) -[e5]-> (c3:XSDComplexType) \
#						optional match (el1:XSDElement) -[e3]-> (c2:XSDComplexType)  \
#						optional match (el2:XSDElement) -[e5]-> (c3:XSDComplexType) \
#						optional match (c:XSDComplexType) \
#						return c,c1,c2,c3,el1,el2,e1,e2,e3,e4,e5
soatool.neo4j.query.xsd.cypher=match (c:XSDComplexType) -[e1]-> (c1:XSDComplexType) \
						optional match (c2:XSDComplexType) -[e2]-> (el1:XSDElement) -[e3]-> (c3:XSDComplexType) \
						optional match (el2:XSDElement) -[e4]-> (c4:XSDComplexType) \
						return c,c1,c2,c3,c4,el1,el2,e1,e2,e3,e4
soatool.neo4j.query.xsd.import.cypher=match (x:XSD) -[e]-> (x1:XSD)\
						optional match (x) \
						return x,x1,e
soatool.neo4j.query.xsd.import.groups.field=${soatool.neo4j.query.groups.xsd.field.name}
soatool.neo4j.query.xsd.import.groups.regex=${soatool.neo4j.query.groups.xsd.id.regex}
soatool.neo4j.query.xsd.import.groups.default=WSDL SCHEMAS
#group on second part of the path (BusinessService/ProxyService)
soatool.neo4j.query.osb.groups.id.regex=^(.*)Node:([^\\/]*\\/)([^\\/]*)\\/.*,$3
soatool.neo4j.query.logging.cypher=match (p:ProxyService) -[e1]-> (ple) -[e10]-> (pof) -[e2]-> (c:Context) \
							optional match (c) -[e3]-> (r:Report) -[e4]-> (l:LoggingKey) \
							optional match (c) -[e5]-> (b:BusinessService) \
							optional match (b) -[e6]-> (p1:ProxyService) \
							optional match (c) -[e7]-> (p2:ProxyService) \
							optional match (c) -[e8]-> (a:Alert) -[e9]-> (ad:AlertDestination) \
							return p,p1,p2,b,ple,pof,c,a,ad,r,l,e1,e2,e3,e4,e5,e6,e7,e8,e9,e10
#soatool.neo4j.query.logging.groups=${soatool.neo4j.query.osb.groups.id}
soatool.neo4j.query.logging.groups.field=id
soatool.neo4j.query.logging.exclude.filter=Report,LoggingKey,Alert,AlertDestination
soatool.neo4j.query.osb.cypher=match (p) -[e1:CALLS]-> (o) \
							optional match (p) -[e2]-> (ple) -[e8]-> (pof) -[e3]-> (c:Context) \
							optional match (c) -[e4]-> (r:Report) -[e5]-> (l:LoggingKey) \
							optional match (c) -[e6]-> (a:Alert) -[e7]-> (ad:AlertDestination) \
							return p,o,ple,pof,c,a,ad,r,l,e1,e2,3,e4,e5,e6,e7,e8
soatool.neo4j.query.osb.exclude.filter=Context,Flow,Pipeline,Report,LoggingKey,Alert,AlertDestination,Invoke,Task,Service,Reference
soatool.neo4j.query.osb.groups.field=id
soatool.neo4j.query.osb.groups.regex=^(.*)Node:([^\\/]*)\\/.*,$2
soatool.neo4j.query.osb.groups.default=OTHER
soatool.neo4j.query.composite.cypher=match (s:Service) -[e1]-> (c:Composite) -[e2]-> (r:Reference) \
								optional match (s:Service) -[e1]-> (c:Composite) -[e2]-> (r:Reference) -[e3] -> (s1:Service) -[e4]-> (c1:Composite) \
								return c,c1,r,s,s1,e1,e2,e3,e4
soatool.neo4j.query.composite.groups.regex=^(Composite|Reference|Service)Node:(Application)?([^\\/]*)\\/.*,$3,^(BusinessService|ProxyService)Node:.*,JSB
soatool.neo4j.query.composite.groups.default=Other
soatool.neo4j.query.reporting.cypher=match (p:ProxyService) --> (pof) --> (c:Context) --> (r:Report) --> (l:LoggingKey) \
								return distinct c.description,p.id,p.description, r.queryText,l.id,l.xpath
soatool.neo4j.query.reporting.type=row
soatool.neo4j.query.alert.destinations.cypher=match (p:ProxyService) -[*0..3]-> (a:Alert) --> (ad:AlertDestination) \
										return distinct p.id,p.description,a.severity,a.message,a.destination,ad.alertToSMNP,ad.alertToReporting,ad.alertToConsole,ad.endpoints
soatool.neo4j.query.alert.destinations.type=row
soatool.neo4j.query.deps.cypher=match (s1:Service) -[e5]-> (c2:Composite) -[e6]-> (r1:Reference) \
								optional match (b:BusinessService)-[e1]-> (s:Service) -[e2]-> (c:Composite), \
                                	(c1:Composite) -[e3]-> (r:Reference) -[e4] -> (p1:ProxyService) \
                                optional match (s1) -[e5]-> (c2) -[e6]-> (r1) -[e7] -> (s2:Service) -[e8]-> (c3:Composite) \
                                optional match (s1)-[e9]-> (w:WSDL) -[e10]-> (j:JCA) -[e11]-> (ja:JCAAdapter) \
                                optional match (r1)-[e12]-> (w1:WSDL) -[e13]-> (j1:JCA) -[e14]-> (ja1:JCAAdapter) \
                                optional match (w) -[e15]-> (bin:Binding) \
                                    return b,bin,p1,c,c1,c2,c3,s,r,r1,s1,s2,w,w1,j,j1,ja,ja1,e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11,e12,e13,e14,e15 
soatool.neo4j.query.deps.groups.regex=^(Composite|Reference|Service)Node:(Application)?([^\\/]*)\\/.*,$3,^(BusinessService|ProxyService)Node:.*,JSB
soatool.neo4j.query.deps.groups.default=JSB
soatool.neo4j.query.deps.exclude.filter=WSDL,JCA,JCAAdapter
soatool.neo4j.query.deps_queue.cypher=optional match (c:Composite) <-[e0]- (s:Service) -[e1]-> (w2:WSDL) -[e2]-> (j:JCA) -[e3]-> (ja:JCAAdapter) <-[e4]- (j1:JCA) <-[e5]- (w3:WSDL) <-[e6]- (r:Reference) <-[e7]- (c1:Composite) \
								return c,s,w2,j,ja,j1,r,c1,e0,e1,e2,e3,e4,e5,e6,e7 
soatool.neo4j.query.archi.cypher=match (c:Composite) \
								optional match (c:Composite) -[e1]-> (r:Reference) -[e2]-> (s:Service) -[e3]-> (ct:Composite) \
								return e1,e2,e3,c,r,s,ct
soatool.neo4j.query.messagechain.cypher=match (p:ProxyService) -[e1]-> (l:Pipeline) -[e2]-> (c:Context) -[e3]-> (e:Expression)-[e4]-> (t:Transformation) \
								optional match (e) -[e5]-> (v:Variable) \
								optional match (e) -[e6]-> (par:Parameter) -[e7]-> (pv:ParameterValue) \
								where t.description="TransformParametersToKeys" \
								return p,l,c,e,t,v,par,pv,e1,e2,e3,e4,e5,e6,e7;
soatool.neo4j.query.osbchain.cypher=match (p:ProxyService) -[e1]-> (l:Pipeline) -[e2]-> (c:Context) -[e3]-> (e:Expression)-[e4]-> (t:Transformation) \
								optional match (e) -[e5]-> (v:Variable) \
								optional match (e) -[e6]-> (par:Parameter) -[e7]-> (pv:ParameterValue) \
								where t.description="TransformParametersToKeys" \
								return distinct p.description,c.description,e.description,t.description,v.description,par.description,pv.value,pv.XMLFragment;
soatool.neo4j.query.osbchain.type=row
soatool.neo4j.query.xsd.archi.cypher=match (x:XSD) -[e1]->(x2:XSD) return x,x2,e1;
