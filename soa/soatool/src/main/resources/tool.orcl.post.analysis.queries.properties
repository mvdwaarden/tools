#Relaties tussen proxies leggen
soatool.orcl.post.analysis.queries=proxy2proxy,proxy2business,business2proxy.via.wsdl,business2business.via.bpel,removedups1,removedups2,removedups3
soatool.neo4j.query.proxy2proxy.cypher=match (from:ProxyService) -[*0..3]-> (to:ProxyService) where from.id <> to.id   create (from) -[:CALLS]-> (to)
soatool.neo4j.query.proxy2business.cypher=match (from:ProxyService) -[*0..3]-> (to:BusinessService) where from.id <> to.id   create (from) -[:CALLS]-> (to)
soatool.neo4j.query.business2proxy.via.wsdl.cypher=match (p:ProxyService) --> (from:BusinessService) -->  (w:WSDL) <--  (to:ProxyService) create (from) -[:CALLS]-> (to)
soatool.neo4j.query.business2business.via.bpel.cypher=match (from:BusinessService) --> (BPEL) -->  (Scope) --> (Invoke) --> (to:BusinessService) create (from) -[:CALLS]-> (to)
#Dubbele relaties verwijderen
soatool.neo4j.query.removedups1.cypher=match (n:ProxyService)-[r:CALLS]->(m:ProxyService) with n, m, collect(r)[1..] as rels foreach (r in rels | delete r)
soatool.neo4j.query.removedups2.cypher=match (n:ProxyService)-[r:CALLS]->(m:BusinessService) with n, m, collect(r)[1..] as rels foreach (r in rels | delete r)  
soatool.neo4j.query.removedups3.cypher=match (n:BusinessService)-[r:CALLS]->(m:BusinessService) with n, m, collect(r)[1..] as rels foreach (r in rels | delete r)

